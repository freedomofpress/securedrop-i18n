---
- name: Ensure package name is set
  assert:
    that: package_name != ""

- name: Ensure build directory in-place
  file:
    state: directory
    path: "{{ securedrop_generic_build_path }}"

- name: Copy app code to build directory.
  synchronize:
    # All Debian package control files for FPF-maintained packages reside in
    # `install_files/<package_name>` in the SecureDrop git repository.
    src: "{{ package_path }}"
    dest: "{{ build_path }}/"
    recursive: yes
    delete: yes
    rsync_opts: "{{ securedrop_app_rsync_opts }}"

- name: Find any jinja templates
  find:
    paths: "{{ package_path }}/"
    patterns: "*.j2"
    recurse: yes
  become: no
  delegate_to: localhost
  register: jinja_files_found

- name: Create any necessary parent directories for jinja files
  file:
    path: "{{ build_path }}/{{ item.path | dirname |regex_replace('^\\/.*'+package_name, '') }}"
    state: directory
  with_items: "{{ jinja_files_found.files }}"

- name: Template out any jinja files found and copy over
  template:
    src: "{{ item.path }}"
    dest: "{{ build_path }}/{{ item.path | regex_replace('^\\/.*'+package_dirname, '') | regex_replace ('\\.j2$','') }}"
    mode: "{{ '0755' if 'postinst' in item.path|basename else '0644' }}"
  with_items: "{{ jinja_files_found.files }}"

- name: run bash script to build generic packages
  script: "build_generic_package.sh {{ package_name }}"

- name: Track down package
  find:
    path: /tmp
    patterns: "*{{ package_name }}*.deb"
  register: list_deb_pkg_results
  changed_when: false

- name: Fetch back package
  fetch:
    src: "{{ item.path }}"
    dest: "{{ securedrop_local_build }}/"
    flat: yes
  with_items: "{{ list_deb_pkg_results.files }}"
