---
  # Do NOT!!! reload the production iptables rules during the first
  # installation. They will break the ssh connection and because of
  # that it will break the installation leaving you with no remote
  # access to the server. If this happens will need console access
  # to recover access.
  #
  # The staging exemptions will reload the iptables rules after the exemptions
  # are put in place
  #
  # For production systems the iptables rules will not be loaded until the
  # server is rebooted. This also means that any updates to the firewall in the
  # future will require a restart.
  #
  # The process should be re-designed so the iptables rules are not applied in
  # bulk. When that is done this issue will be avoided.

- name: Gather localhost facts first
  setup:
  become: no
  delegate_to: localhost
  delegate_facts: True

- name: Copy load_iptables if-up script.
  copy:
    src: load_iptables
    dest: /etc/network/if-up.d/load_iptables
    owner: root
    mode: "0744"
  when:
    - ansible_distribution_release == 'xenial'

- name: Create iptables directory.
  file:
    state: directory
    mode: "0700"
    owner: root
    group: root
    dest: /etc/network/iptables
  when:
    - ansible_distribution_release == 'xenial'

- name: Determine local platform specific routing info
  set_fact:
    admin_route_map: "{{ admin_net_int[hostvars['localhost']['ansible_system']] }}"

- name: Record admin network interface
  set_fact:
    admin_dev: "{{ lookup('pipe',admin_route_map.cmd+ssh_ip)|regex_search(admin_route_map.rgx) }}"

# this is a weird work-around for an issue I found with Mac reporting the interface
# wrapped in a list, rather than just a dict :shrug:
- name: Hacky work-around for Mac/Linux interface structure divergence
  set_fact:
    admin_net_info: "{{ hostvars['localhost']['ansible_'+admin_dev].ipv4[0] | default(
                        hostvars['localhost']['ansible_'+admin_dev].ipv4) }}"

- name: Compute admin network CIDR
  set_fact:
    admin_net_cidr: "{{ '/'.join([admin_net_info.network, admin_net_info.netmask])|ipaddr('cidr') }}"
  delegate_to: localhost

- name: Copy IPv4 iptables rules.
  template:
    src: rules_v4
    dest: "{{ iptables_v4_path }}"
    owner: root
    mode: "0644"
  notify: drop flag for reboot

- name: Copy IPv6 iptables rules.
  copy:
    src: iptables_rules_v6
    dest: "{{ iptables_v6_path }}"
    owner: root
    mode: "0644"
